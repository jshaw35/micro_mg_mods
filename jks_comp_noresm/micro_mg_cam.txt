89a90,91
> use cam_history_support, only: add_hist_coord ! jks 111119
> 
141a144,157
> ! SLF output - new dimensions !zsm, jks
> integer, parameter :: nisotherms_mpc = 9
> real(r8), target :: isotherms_mpc_midpoints(nisotherms_mpc)
> real(r8), target :: isotherms_mpc_bounds(2,nisotherms_mpc)
> 
> integer, parameter :: nslfbins = 11
> real(r8), target :: slfbins_midpoints(nslfbins)
> real(r8), target :: slfbins_bounds(2,nslfbins)
> 
> integer, parameter :: nprecipbins = 32
> real(r8), target :: precipbins_midpoints(nprecipbins)
> real(r8), target :: precipbins_bounds(2,nprecipbins)
> !--- !zsm, jks
> 
160a177
>    sadliq_idx,         & !zsm, jks
233a251,252
>    prec_dp_idx = -1,        & !zsm, jks
>    prec_sh_idx = -1,        & !zsm, jks
452a472
>    call pbuf_add_field('SADLIQ',     'physpkg',dtype_r8,(/pcols,pver/), sadliq_idx) !zsm, jks
530a551
>       call pbuf_register_subcol('SADLIQ',      'micro_mg_cam_register', sadliq_idx) !zsm
662a684,686
>    integer :: t, s, pr             ! loop through bins of temperature, slf,
>                                    ! and precip  !zsm, jks
> 
761a786,866
>       ! SLF OUTPUT !zsm, jks 111119
>    !
>    ! WARNING: Must divide each in-cloud var by corresponding CLD_ISOTM var
>    !          to adjust for raw SLF vars
>    !          being monthly averages that include zeros at times/locations where
>    !          no cloud detected on isotherm
>    !          i.e. SLF_ISOTM = SLFXCLD_ISOTM / CLD_ISOTM
> 
>    ! Fill in info on new dimensions
> 
>    do t=1,nisotherms_mpc
>       isotherms_mpc_midpoints(t)=273.15_r8-5._r8*(nisotherms_mpc-t)
>       isotherms_mpc_bounds(1,t)=isotherms_mpc_midpoints(t)-1.0_r8
>       isotherms_mpc_bounds(2,t)=isotherms_mpc_midpoints(t)+1.0_r8
>    end do
> 
>    call add_hist_coord('isotherms_mpc', nisotherms_mpc, 'mixed-phase cloud isotherms (data within 1.0C)',  &
>            'C', isotherms_mpc_midpoints, bounds_name='isotherms_mpc_bounds', bounds=isotherms_mpc_bounds)
> 
>    slfbins_midpoints   = (/ 5.e-31_r8, .00005_r8, .00055_r8, .0055_r8, .055_r8, .5_r8, &
>                             .945_r8, .9945_r8, .99945_r8, .99995_r8,       1._r8-5.e-31 /)
>    slfbins_bounds(1,:) = (/ 0._r8,     1.e-30_r8, .0001_r8,  .001_r8,  .01_r8, .1_r8,  &
>                             .9_r8,   .99_r8,   .999_r8,   .9999_r8,        1._r8-1.e-30_r8 /)
>    slfbins_bounds(2,:) = (/ 1.e-30_r8, .0001_r8,  .001_r8,   .01_r8,   .1_r8, .9_r8,   &
>                             .99_r8,  .999_r8,  .9999_r8,  1._r8-1.e-30_r8, 1._r8 /)
> 
>    call add_hist_coord('slfbins', nslfbins, 'supercooled liquid fraction bins',  &
>            'C', slfbins_midpoints, bounds_name='slfbins_bounds', bounds=slfbins_bounds)
> 
>    precipbins_bounds(1,1) = 0._r8
>    precipbins_bounds(2,1) = 1.e-3_r8
>    precipbins_midpoints(1) = 5.e-4_r8
>    do pr=2,nprecipbins
>       precipbins_bounds(1,pr)= precipbins_bounds(2,pr-1)
>       if (pr.ne.nprecipbins) then
>          precipbins_bounds(2,pr)=precipbins_bounds(1,pr) * 10._r8**(5._r8/(nprecipbins-2._r8))
>       else
>          precipbins_bounds(2,pr)=precipbins_bounds(1,pr)*1.e10_r8
>       end if
>       precipbins_midpoints(pr)=(precipbins_bounds(1,pr)+precipbins_bounds(2,pr))/2._r8
>    end do
> 
>    call add_hist_coord('precipbins', nprecipbins, 'precipitation rate bins', &
>            'C', precipbins_midpoints, bounds_name='precipbins_bounds', bounds=precipbins_bounds)
> 
>    ! Define new variables
> 
>    call addfld ('SLFXCLD_ISOTM',        (/'isotherms_mpc'/), 'A', ' ', 'Mean supercooled liquid fraction near isotherm * CLD_ISOTM (discard below thick cloud)' )
>    call addfld ('SADLIQXCLD_ISOTM',     (/'isotherms_mpc'/), 'A', ' ', 'Mean droplet surface area density near isotherm * CLD_ISOTM (discard below thick cloud)')
>    call addfld ('SADICEXCLD_ISOTM',     (/'isotherms_mpc'/), 'A', ' ', 'Mean ice surface area density near isotherm * CLD_ISOTM (discard below thick cloud)'    )
>    call addfld ('BERGOXCLD_ISOTM',      (/'isotherms_mpc'/), 'A', ' ', 'Mean BERGO near isotherm * CLD_ISOTM (discard below thick cloud)'                       )
>    call addfld ('BERGSOXCLD_ISOTM',     (/'isotherms_mpc'/), 'A', ' ', 'Mean BERGSO near isotherm * CLD_ISOTM (discard below thick cloud)'                      )
>    call addfld ('CLD_ISOTM' ,           (/'isotherms_mpc'/), 'A', ' ', 'Total cloud fraction near isotherm (discard below thick cloud)'                         )
> 
>    call addfld ('CT_SLFXCLD_ISOTM',        (/'isotherms_mpc'/), 'A', ' ', 'Mean cloudtop supercooled liquid fraction near isotherm * CLD_ISOTM (discard below thick cloud)' ) ! jks
>    call addfld ('CT_CLD_ISOTM' ,           (/'isotherms_mpc'/), 'A', ' ', 'Total cloudtop cloud fraction near isotherm (discard below thick cloud)'                         ) ! jks
> 
>    call addfld ('SLFXCLD_ISOTM_NONSIM',        (/'isotherms_mpc'/), 'A', ' ', 'Mean supercooled liquid fraction near isotherm * CLD_ISOTM_NONSIM' )
>    call addfld ('SADLIQXCLD_ISOTM_NONSIM',     (/'isotherms_mpc'/), 'A', ' ', 'Mean droplet surface area density near isotherm * CLD_ISOTM_NONSIM')
>    call addfld ('SADICEXCLD_ISOTM_NONSIM',     (/'isotherms_mpc'/), 'A', ' ', 'Mean ice surface area density near isotherm * CLD_ISOTM_NONSIM'    )
>    call addfld ('BERGOXCLD_ISOTM_NONSIM',      (/'isotherms_mpc'/), 'A', ' ', 'Mean BERGO near isotherm * CLD_ISOTM_NONSIM'                       )
>    call addfld ('BERGSOXCLD_ISOTM_NONSIM',     (/'isotherms_mpc'/), 'A', ' ', 'Mean BERGSO near isotherm * CLD_ISOTM_NONSIM'                      )
>    call addfld ('CLD_ISOTM_NONSIM' ,           (/'isotherms_mpc'/), 'A', ' ', 'Total cloud fraction near isotherm'                                )
> 
>    call addfld ('CLD_SLF',        (/'slfbins'/),                       'A', ' ', 'Total cloud fraction in SLF bin (discard below thick cloud)'              )
>    call addfld ('CLD_ISOTM_SLF',  (/'isotherms_mpc','slfbins'/),       'A', ' ', 'Total cloud fraction in SLF bin near isotherm (discard below thick cloud)')
> 
>    call addfld ('CLD_SLF_NONSIM',        (/'slfbins'/),                       'A', ' ', 'Total cloud fraction in SLF bin'              )
>    call addfld ('CLD_ISOTM_SLF_NONSIM',  (/'isotherms_mpc','slfbins'/),       'A', ' ', 'Total cloud fraction in SLF bin near isotherm')
> 
>    call addfld ('PRECIPBINOCC_CC',  (/'precipbins'/), 'A', ' ', 'Occurrence of convective precip bin'  )
>    call addfld ('PRECIPBINOCC_CL',  (/'precipbins'/), 'A', ' ', 'Occurrence of stratiform precip bin'  )
>    call addfld ('PRECIPBINOCC_CT',  (/'precipbins'/), 'A', ' ', 'Occurrence of total precip bin'       )
>    call addfld ('PRECIPBINRATE_CC', (/'precipbins'/), 'A', ' ', 'Precip rate in convective precip bin' )
>    call addfld ('PRECIPBINRATE_CL', (/'precipbins'/), 'A', ' ', 'Precip rate in stratiform precip bin' )
>    call addfld ('PRECIPBINRATE_CT', (/'precipbins'/), 'A', ' ', 'Precip rate in total precip bin'      )
> 
> 
>    call addfld ('CLDTAU',               (/ 'lev' /),         'A', ' ', 'Cloud optical thickness'                                    )
>    !--- !zsm, jks
> 
916a1022
>    call addfld ('MG_SADLIQ',   (/ 'lev' /),  'A', 'cm2/cm3',  'MG surface area density liq'                                       ) !zsm,jks
1015a1122,1124
>    call add_default ('MG_SADICE',        1, ' ') !zsm
>    call add_default ('MG_SADLIQ',        1, ' ') !zsm
> 
1117a1227,1260
>       ! SLF OUTPUT !zsm, jks
>    call add_default ('SLFXCLD_ISOTM',        1, ' ')
>    call add_default ('SADLIQXCLD_ISOTM',     1, ' ')
>    call add_default ('SADICEXCLD_ISOTM',     1, ' ')
>    call add_default ('BERGOXCLD_ISOTM',      1, ' ')
>    call add_default ('BERGSOXCLD_ISOTM',     1, ' ')
>    call add_default ('CLD_ISOTM',            1, ' ')
> 
>    call add_default ('CT_SLFXCLD_ISOTM',        1, ' ')
>    call add_default ('CT_CLD_ISOTM',            1, ' ')
> 
>    call add_default ('SLFXCLD_ISOTM_NONSIM',        1, ' ')
>    call add_default ('SADLIQXCLD_ISOTM_NONSIM',     1, ' ')
>    call add_default ('SADICEXCLD_ISOTM_NONSIM',     1, ' ')
>    call add_default ('BERGOXCLD_ISOTM_NONSIM',      1, ' ')
>    call add_default ('BERGSOXCLD_ISOTM_NONSIM',     1, ' ')
>    call add_default ('CLD_ISOTM_NONSIM',            1, ' ')
> 
>    call add_default ('CLD_SLF',                      1, ' ')
>    call add_default ('CLD_ISOTM_SLF',                1, ' ')
> 
>    call add_default ('CLD_SLF_NONSIM',               1, ' ')
>    call add_default ('CLD_ISOTM_SLF_NONSIM',         1, ' ')
> 
>    call add_default ('PRECIPBINOCC_CC          ',1,' ')
>    call add_default ('PRECIPBINOCC_CL          ',1,' ')
>    call add_default ('PRECIPBINOCC_CT          ',1,' ')
>    call add_default ('PRECIPBINRATE_CC         ',1,' ')
>    call add_default ('PRECIPBINRATE_CL         ',1,' ')
>    call add_default ('PRECIPBINRATE_CT         ',1,' ')
> 
>    call add_default ('CLDTAU',               1, ' ')
>    !--- !zsm, jks
> 
1134a1278,1279
>    prec_dp_idx  = pbuf_get_index('PREC_DP') !zsm
>    prec_sh_idx  = pbuf_get_index('PREC_SH') !zsm
1205c1350,1352
<    integer, allocatable :: mgcols(:) ! Columns with microphysics performed
---
>    integer :: lchnk                  !zsm, jks
>    integer, allocatable :: mgcols(:) ! Columns with microphysics performed !zsm, jks
>    real(r8), allocatable :: mgrlats(:) ! zsm, jks
1209a1357
>    lchnk = state%lchnk               !zsm, jks
1216c1364
<       call micro_mg_get_cols2_0(ncol, nlev, top_lev, state%q(:,:,ixcldliq), &
---
>       call micro_mg_get_cols2_0(lchnk, ncol, nlev, top_lev, state%q(:,:,ixcldliq), & ! jks
1218c1366
<            mgncol, mgcols)
---
>            mgncol, mgcols, mgrlats) !jks
1221c1369
<    call micro_mg_cam_tend_pack(state, ptend, dtime, pbuf, mgncol, mgcols, nlev)
---
>    call micro_mg_cam_tend_pack(state, ptend, dtime, pbuf, mgncol, mgcols, mgrlats, nlev) !jks
1225c1373
< subroutine micro_mg_cam_tend_pack(state, ptend, dtime, pbuf, mgncol, mgcols, nlev)
---
> subroutine micro_mg_cam_tend_pack(state, ptend, dtime, pbuf, mgncol, mgcols, mgrlats, nlev) !jks
1248a1397
>    real(r8), intent(in) :: mgrlats(:)  !zsm, jks
1253a1403
>    integer :: t, s, pr                 !zsm, jks
1269a1420,1423
>    real(r8), pointer :: prec_dp(:)           ! total precipitation from ZM convection !zsm, jks
>    real(r8), pointer :: prec_sh(:)           ! total precipitation from Hack convection !zsm, jks
>    real(r8):: precc(pcols)                   ! convective precip rate !zsm, jks
>    real(r8):: precl(pcols)                   ! stratiform precip rate !zsm, jks
1285a1440,1480
>       ! SLF Calculation - define new variables, etc !zsm, jks
>    real(r8) :: slfxcld_isotm(pcols,nisotherms_mpc)
>    real(r8) :: sadliqxcld_isotm(pcols,nisotherms_mpc)
>    real(r8) :: sadicexcld_isotm(pcols,nisotherms_mpc)
>    real(r8) :: bergoxcld_isotm(pcols,nisotherms_mpc)
>    real(r8) :: bergsoxcld_isotm(pcols,nisotherms_mpc)
>    real(r8) :: cld_isotm(pcols,nisotherms_mpc)
> 
>    real(r8) :: ct_slfxcld_isotm(pcols,nisotherms_mpc) ! jks
>    real(r8) :: ct_cld_isotm(pcols,nisotherms_mpc) ! jks
> 
>    real(r8) :: slfxcld_isotm_nonsim(pcols,nisotherms_mpc)
>    real(r8) :: sadliqxcld_isotm_nonsim(pcols,nisotherms_mpc)
>    real(r8) :: sadicexcld_isotm_nonsim(pcols,nisotherms_mpc)
>    real(r8) :: bergoxcld_isotm_nonsim(pcols,nisotherms_mpc)
>    real(r8) :: bergsoxcld_isotm_nonsim(pcols,nisotherms_mpc)
>    real(r8) :: cld_isotm_nonsim(pcols,nisotherms_mpc)
> 
>    real(r8) :: cld_slf(pcols,nslfbins)
>    real(r8) :: cld_isotm_slf(pcols,nisotherms_mpc,nslfbins)
> 
>    real(r8) :: cld_slf_nonsim(pcols,nslfbins)
>    real(r8) :: cld_isotm_slf_nonsim(pcols,nisotherms_mpc,nslfbins)
> 
>    real(r8) :: precipbinocc_cc(pcols,nprecipbins)
>    real(r8) :: precipbinocc_cl(pcols,nprecipbins)
>    real(r8) :: precipbinocc_ct(pcols,nprecipbins)
>    real(r8) :: precipbinrate_cc(pcols,nprecipbins)
>    real(r8) :: precipbinrate_cl(pcols,nprecipbins)
>    real(r8) :: precipbinrate_ct(pcols,nprecipbins)
> 
>    real(r8) :: cldtau(pcols,pver)
>    real(r8) :: wgt
>    logical :: calioptest(pcols)
>    logical :: cloudtoptest ! jks cloudtop boolean
>    real(r8), parameter :: abarl = 2.817e-02_r8 ! A coefficient for extinction optical depth
>    real(r8), parameter :: bbarl = 1.305_r8 ! b coefficient for extinction optical depth
>    real(r8), parameter :: abari = 3.448e-03_r8 ! A coefficient for extinction optical depth
>    real(r8), parameter :: bbari = 2.431_r8 ! b coefficient for extinction optical depth
>    !---!zsm/itan, jks
> 
1530a1726
>    real(r8), target :: packed_sadliq(mgncol,nlev) !zsm, jks
1629a1826
>    real(r8), pointer :: sadliq(:,:)       ! Ice surface area density (cm2/cm3) !zsm, jks
1720a1918
>    real(r8), pointer :: sadliq_grid(:,:) !zsm
1903a2102
>    call pbuf_get_field(pbuf, sadliq_idx,      sadliq,      col_type=col_type) !zsm, jks
1906a2106,2107
>    call pbuf_get_field(pbuf, prec_dp_idx,     prec_dp,     col_type=col_type) !zsm, jks
>    call pbuf_get_field(pbuf, prec_sh_idx,     prec_sh,     col_type=col_type) !zsm, jks
1955a2157
>       call pbuf_get_field(pbuf, sadliq_idx,      sadliq_grid) !zsm, jks
1958a2161,2162
>       call pbuf_get_field(pbuf, prec_dp_idx,     prec_dp) !zsm, jks
>       call pbuf_get_field(pbuf, prec_sh_idx,     prec_sh) !zsm, jks
2206a2411,2412
>    call post_proc%add_field(p(sadliq), p(packed_sadliq), &
>         accum_method=accum_null)                            !zsm, jks
2319a2526
>                  mgrlats,                                        & ! zsm, jks
2337c2544
<                  packed_sadice,          packed_sadsnow,         &
---
>                  packed_sadice, packed_sadliq,  packed_sadsnow,  & !zsm, jks
2520a2728,2730
>    precc(:ncol)    = prec_dp(:ncol)  + prec_sh(:ncol) !zsm
>    precl(:ncol)    = prec_sed(:ncol) + prec_pcw(:ncol) !zsm
> 
2550a2761,2771
>          !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
>          ! Calculate cloud optical thickness for use making SLF comparable with
>          ! observations !itan/zsm, jks
>          if(cld(i,k) >= 0.01) then
>             cldtau(i,k) = (abarl + bbarl/rel(i,k)) * iclwpst(i,k)*1000._r8 + &
>                           (abari + bbari/rei(i,k)) * iciwpst(i,k)*1000._r8
>          else
>             cldtau(i,k) = 0._r8
>          endif
>         !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
> 
2653a2875
>       sadliq_grid     => sadliq !zsm, jks
3109a3332,3499
>    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
>    !
>    ! SLF CALCULATIONS !zsm/muge/itan
>    ! Written by I Tan & M Komurcu as used in Komurcu et al JGR 2014
>    ! Bug fixes & modifications by Z S McGraw, Added to NorESM 111119 jks.
>    !
>    ! Averages Supercooled Liquid Fraction (SLF) between all
>    ! occurences of clouds on isotherms (-10C,-15C,-20C,
>    ! -25C,-30C,-35C) EXCEPT where hidden below dense cloud
>    ! (OD>3.0), for comparison with CALIOP observations as in
>    ! Tan et al Science 2015
>    !
>    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
> 
>    slfxcld_isotm                     = 0._r8
>    sadliqxcld_isotm                  = 0._r8
>    sadicexcld_isotm                  = 0._r8
>    bergoxcld_isotm                   = 0._r8
>    bergsoxcld_isotm                  = 0._r8
>    cld_isotm                         = 0._r8
> 
>    ct_slfxcld_isotm                  = 0._r8 ! jks
>    ct_cld_isotm                      = 0._r8 ! jks
> 
>    slfxcld_isotm_nonsim              = 0._r8
>    sadliqxcld_isotm_nonsim           = 0._r8
>    sadicexcld_isotm_nonsim           = 0._r8
>    bergoxcld_isotm_nonsim            = 0._r8
>    bergsoxcld_isotm_nonsim           = 0._r8
>    cld_isotm_nonsim                  = 0._r8
> 
>    cld_slf                           = 0._r8
>    cld_isotm_slf                     = 0._r8
> 
>    cld_slf_nonsim                    = 0._r8
>    cld_isotm_slf_nonsim              = 0._r8
> 
>    precipbinocc_cl                   = 0._r8 
>    precipbinocc_cc                   = 0._r8 
>    precipbinocc_ct                   = 0._r8 
>    precipbinrate_cl                  = 0._r8
>    precipbinrate_cc                  = 0._r8
>    precipbinrate_ct                  = 0._r8
> 
>    ! Calculate variables without accounting for satellite limitations below
>    ! thick clouds
>    do i=1,ncol
>     do k=1,pver
>      if (cld(i,k).gt.0.01 .and. (icimrst(i,k)+icwmrst(i,k)).gt.1.e-7_r8) then
> 
>          do t=1,nisotherms_mpc
>           if ((state_loc%t(i,k).gt.isotherms_mpc_bounds(1,t)).and.(state_loc%t(i,k).le.isotherms_mpc_bounds(2,t))) then
>              slfxcld_isotm_nonsim(i,t)        = slfxcld_isotm_nonsim(i,t) + sadliq_grid(i,k)/(sadliq_grid(i,k)+sadice_grid(i,k)) * cld(i,k)
>              sadliqxcld_isotm_nonsim(i,t)     = sadliqxcld_isotm_nonsim(i,t) + sadliq_grid(i,k) * cld(i,k)
>              sadicexcld_isotm_nonsim(i,t)     = sadicexcld_isotm_nonsim(i,t) + sadice_grid(i,k) * cld(i,k)
>              bergoxcld_isotm_nonsim(i,t)      = bergoxcld_isotm_nonsim(i,t) + bergo_grid(i,k) * cld(i,k)
>              bergsoxcld_isotm_nonsim(i,t)     = bergsoxcld_isotm_nonsim(i,t) + bergso_grid(i,k) * cld(i,k)
>              cld_isotm_nonsim(i,t)            = cld_isotm_nonsim(i,t) + cld(i,k)
>           endif ! loose temperature conditional
>          end do
> 
>          ! output binned by supercooled liquid fraction
>          do s=1,nslfbins
>           if ((sadliq_grid(i,k)/(sadliq_grid(i,k)+sadice_grid(i,k)).ge.slfbins_bounds(1,s)).and.(sadliq_grid(i,k)/(sadliq_grid(i,k)+sadice_grid(i,k)).le.slfbins_bounds(2,s))) then
>              cld_slf_nonsim(i,s) = cld_slf_nonsim(i,s) + cld(i,k)
> 
>              do t=1,nisotherms_mpc
>               if ((state_loc%t(i,k).gt.isotherms_mpc_bounds(1,t)).and.(state_loc%t(i,k).le.isotherms_mpc_bounds(2,t))) then
>                 cld_isotm_slf_nonsim(i,t,s) = cld_isotm_slf_nonsim(i,t,s) + cld(i,k)
>               end if ! loose temperature conditional
>              end do
>           endif
>          end do
> 
>      endif ! cld fract and mr conditional
>     enddo ! i, k loops
>    enddo ! i, k loops
> 
>    ! Calculate variables to match CALIOP (discard instances below thick cloud)
> 
>    do i=1,ncol
>      calioptest(i)=.true.
>    enddo
> 
>    do i=1,ncol
>     do k=1,pver
>      if (cld(i,k).gt.0.01 .and. (icimrst(i,k)+icwmrst(i,k)).gt.1.e-7_r8) then
>        if (calioptest(i)) then
>          if (cldtau(i,k).gt.3.0) calioptest(i)=.false.
> 
>          do t=1,nisotherms_mpc
>           if ((state_loc%t(i,k).gt.isotherms_mpc_bounds(1,t)).and.(state_loc%t(i,k).le.isotherms_mpc_bounds(2,t))) then
>              slfxcld_isotm(i,t)        = slfxcld_isotm(i,t) + sadliq_grid(i,k)/(sadliq_grid(i,k)+sadice_grid(i,k)) * cld(i,k)
>              sadliqxcld_isotm(i,t)     = sadliqxcld_isotm(i,t) + sadliq_grid(i,k) * cld(i,k)
>              sadicexcld_isotm(i,t)     = sadicexcld_isotm(i,t) + sadice_grid(i,k) * cld(i,k)
>              bergoxcld_isotm(i,t)      = bergoxcld_isotm(i,t) + bergo_grid(i,k) * cld(i,k)
>              bergsoxcld_isotm(i,t)     = bergsoxcld_isotm(i,t) + bergso_grid(i,k) * cld(i,k)
>              cld_isotm(i,t)            = cld_isotm(i,t) + cld(i,k)
>           endif ! loose temperature conditional
>          end do
> 
>          ! output binned by supercooled liquid fraction
>          do s=1,nslfbins
>           if ((sadliq_grid(i,k)/(sadliq_grid(i,k)+sadice_grid(i,k)).ge.slfbins_bounds(1,s)).and.(sadliq_grid(i,k)/(sadliq_grid(i,k)+sadice_grid(i,k)).le.slfbins_bounds(2,s))) then
>              cld_slf(i,s) = cld_slf(i,s) + cld(i,k)
> 
>              do t=1,nisotherms_mpc
>               if ((state_loc%t(i,k).gt.(isotherms_mpc_bounds(1,t)-2.5_r8)).and.(state_loc%t(i,k).le.(isotherms_mpc_bounds(2,t)+2.5_r8))) then
>                 cld_isotm_slf(i,t,s) = cld_isotm_slf(i,t,s) + cld(i,k)
>               end if ! loose temperature conditional
>              end do
>           endif
>          end do
> 
>        endif ! cld opt thickness conditional
>      endif ! cld fract and mr conditional
>     enddo ! i, k loops
>    enddo ! i, k loops
> 
> !##############################
> !## Cloudtop SLF Calculation ## ! jks 121919
> !##############################
> ! to-do: declare output variables cloudtopslf and cloudtopCLD_isotm and parameter cloudtoptest 
> 
>    do i=1,ncol ! grid box iteration
>       cloudtoptest=.true. ! reset cloudtop boolean for each new grid
>       do k=1,pver ! vertical layer iteration
>          if (cloudtoptest) then ! cloudtop test conditional
>             if (cldtau(i,k).gt.0.3 .and. cldtau(i,k).lt.3.0) then ! Cloud optical thickness range for which we trust obs
>                if (cld(i,k).gt.0.01 .and. (icimrst(i,k)+icwmrst(i,k)).gt.1.e-7_r8) then ! cld fract and mr conditional
>                   cloudtoptest=.false. ! cloudtop found for this grid, move to the next
>                   do t=1,nisotherms_mpc ! bin the following variables by isotherm
>                      if ((state_loc%t(i,k).gt.isotherms_mpc_bounds(1,t)).and.(state_loc%t(i,k).le.isotherms_mpc_bounds(2,t))) then
>                         ct_slfxcld_isotm(i,t)   = ct_slfxcld_isotm(i,t) + sadliq_grid(i,k)/(sadliq_grid(i,k)+sadice_grid(i,k)) * cld(i,k)
>                         ct_cld_isotm(i,t)       = ct_cld_isotm(i,t) + cld(i,k) ! why add and not just label the variable (only one iter)
>                      end if ! loose temperature conditional
>                   end do ! isotherm bin iteration
>                end if ! cld fract and mr conditional
>             end if ! Cloud optical thickness conditional
>          end if ! cloudtop test conditional
>       end do ! vertical layer iteration
>    end do ! grid box iteration 
> 
> !##################################
> !## End Cloudtop SLF Calculation ##
> !##################################
> 
>    do i=1,ncol
>       do pr=1,nprecipbins
>          if ((precc(i)*3.6e6_r8.ge.precipbins_bounds(1,pr)).and.(precc(i)*3.6e6_r8.lt.precipbins_bounds(2,pr))) then
>             precipbinocc_cc(i,pr)  = precipbinocc_cc(i,pr) + 1.0_r8
>             precipbinrate_cc(i,pr)  = precipbinrate_cc(i,pr) + precc(i)*3.6e6_r8
>          end if
> 
>          if ((precl(i)*3.6e6_r8.ge.precipbins_bounds(1,pr)).and.(precl(i)*3.6e6_r8.lt.precipbins_bounds(2,pr))) then
>             precipbinocc_cl(i,pr)  = precipbinocc_cl(i,pr) + 1.0_r8
>             precipbinrate_cl(i,pr)  = precipbinrate_cl(i,pr) + precl(i)*3.6e6_r8
>          end if
> 
>          if (((precc(i)+precl(i))*3.6e6_r8.ge.precipbins_bounds(1,pr)).and.((precc(i)+precl(i))*3.6e6_r8.lt.precipbins_bounds(2,pr))) then
>             precipbinocc_ct(i,pr)  = precipbinocc_ct(i,pr) + 1.0_r8
>             precipbinrate_ct(i,pr)  = precipbinrate_ct(i,pr) + (precc(i)+precl(i))*3.6e6_r8
>          end if
>       end do
>    end do ! i loop
> 
>    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
> 
3218a3609,3642
>    !SLF output - print to history files !zsm, jks
>    call outfld( 'SLFXCLD_ISOTM',        slfxcld_isotm,         pcols,lchnk )
>    call outfld( 'SADLIQXCLD_ISOTM',     sadliqxcld_isotm,      pcols,lchnk )
>    call outfld( 'SADICEXCLD_ISOTM',     sadicexcld_isotm,      pcols,lchnk )
>    call outfld( 'BERGOXCLD_ISOTM',      bergoxcld_isotm,       pcols,lchnk )
>    call outfld( 'BERGSOXCLD_ISOTM',     bergsoxcld_isotm,      pcols,lchnk )
>    call outfld( 'CLD_ISOTM',            cld_isotm,             pcols,lchnk )
> 
>    call outfld( 'CT_SLFXCLD_ISOTM',     ct_slfxcld_isotm,      pcols,lchnk ) ! jks normalized to cloud amount
>    call outfld( 'CT_CLD_ISOTM',         ct_cld_isotm,          pcols,lchnk ) ! jks
> 
>    call outfld( 'SLFXCLD_ISOTM_NONSIM',        slfxcld_isotm_nonsim,        pcols,lchnk )
>    call outfld( 'SADLIQXCLD_ISOTM_NONSIM',     sadliqxcld_isotm_nonsim,     pcols,lchnk )
>    call outfld( 'SADICEXCLD_ISOTM_NONSIM',     sadicexcld_isotm_nonsim,     pcols,lchnk )
>    call outfld( 'BERGOXCLD_ISOTM_NONSIM',      bergoxcld_isotm_nonsim,      pcols,lchnk )
>    call outfld( 'BERGSOXCLD_ISOTM_NONSIM',     bergsoxcld_isotm_nonsim,     pcols,lchnk )
>    call outfld( 'CLD_ISOTM_NONSIM',            cld_isotm_nonsim,            pcols,lchnk )
> 
>    call outfld( 'CLD_SLF',                      cld_slf,              pcols,lchnk )
>    call outfld( 'CLD_ISOTM_SLF',                cld_isotm_slf,        pcols,lchnk )
> 
>    call outfld( 'CLD_SLF_NONSIM',               cld_slf_nonsim,              pcols,lchnk )
>    call outfld( 'CLD_ISOTM_SLF_NONSIM',         cld_isotm_slf_nonsim,        pcols,lchnk )
> 
>    call outfld('PRECIPBINOCC_CC',               precipbinocc_cc,    pcols,lchnk)
>    call outfld('PRECIPBINOCC_CL',               precipbinocc_cl,    pcols,lchnk)
>    call outfld('PRECIPBINOCC_CT',               precipbinocc_ct,    pcols,lchnk)
>    call outfld('PRECIPBINRATE_CC',              precipbinrate_cc,   pcols,lchnk)
>    call outfld('PRECIPBINRATE_CL',              precipbinrate_cl,   pcols,lchnk)
>    call outfld('PRECIPBINRATE_CT',              precipbinrate_ct,   pcols,lchnk)
> 
>    call outfld( 'CLDTAU',                       cldtau,             pcols,lchnk )
>    !--- !zsm, jks
> 
3318a3743
>    call outfld('MG_SADLIQ',   sadliq_grid,      pcols, lchnk) !zsm
